<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>About this Documentation Node.js v0.10.22 Manual &amp; Documentation</title>
  <link rel="stylesheet" href="assets/style.css">
  <link rel="stylesheet" href="assets/sh.css">
  <link rel="canonical" href="http://nodejs.org/api/all.html">
</head>
<body class="alt apidoc" id="api-section-all">
http://evolve.elsevier.com
    <div id="intro" class="interior">
        <a href="/" title="Go back to the home page">
            <img id="logo" src="http://nodejs.org/images/logo-light.png" alt="node.js">
        </a>
    </div>
    <div id="content" class="clearfix">
        <div id="column2" class="interior">
            <ul>
                <li><a href="/" class="home">Home</a></li>
                <li><a href="/download/" class="download">Download</a></li>
                <li><a href="/about/" class="about">About</a></li>
                <li><a href="http://npmjs.org/" class="npm">npm Registry</a></li>
                <li><a href="http://nodejs.org/api/" class="docs current">Docs</a></li>
                <li><a href="http://blog.nodejs.org" class="blog">Blog</a></li>
                <li><a href="/community/" class="community">Community</a></li>
                <li><a href="/logos/" class="logos">Logos</a></li>
                <li><a href="http://jobs.nodejs.org/" class="jobs">Jobs</a></li>
            </ul>
            <p class="twitter"><a href="http://twitter.com/nodejs">@nodejs</a></p>
        </div>

        <div id="column1" class="interior">
          <header>
            <h1>Node.js v0.10.22 Manual &amp; Documentation</h1>
            <div id="gtoc">
              <p>
                <a href="index.html" name="toc">Index</a> |
                <a href="all.html">View on single page</a> |
                <a href="all.json">View as JSON</a>
              </p>
            </div>
            <hr>
          </header>

          <div id="toc">
            <h2>Table of Contents</h2>
            <ul>
<li><a href="#all_about_this_documentation">About this Documentation</a><ul>
<li><a href="#all_stability_index">Stability Index</a></li>
<li><a href="#all_json_output">JSON Output</a></li>
</ul>
</li>
<li><a href="#all_synopsis">Synopsis</a></li>
<li><a href="#all_global_objects">Global Objects</a><ul>
<li><a href="#all_global">global</a></li>
<li><a href="#all_process">process</a></li>
<li><a href="#all_console">console</a></li>
<li><a href="#all_class_buffer">Class: Buffer</a></li>
<li><a href="#all_require">require()</a><ul>
<li><a href="#all_require_resolve">require.resolve()</a></li>
<li><a href="#all_require_cache">require.cache</a></li>
<li><a href="#all_require_extensions">require.extensions</a></li>
</ul>
</li>
<li><a href="#all_filename">__filename</a></li>
<li><a href="#all_dirname">__dirname</a></li>
<li><a href="#all_module">module</a></li>
<li><a href="#all_exports">exports</a></li>
<li><a href="#all_settimeout_cb_ms">setTimeout(cb, ms)</a></li>
<li><a href="#all_cleartimeout_t">clearTimeout(t)</a></li>
<li><a href="#all_setinterval_cb_ms">setInterval(cb, ms)</a></li>
<li><a href="#all_clearinterval_t">clearInterval(t)</a></li>
</ul>
</li>
<li><a href="#all_console_1">console</a><ul>
<li><a href="#all_console_log_data">console.log([data], [...])</a></li>
<li><a href="#all_console_info_data">console.info([data], [...])</a></li>
<li><a href="#all_console_error_data">console.error([data], [...])</a></li>
<li><a href="#all_console_warn_data">console.warn([data], [...])</a></li>
<li><a href="#all_console_dir_obj">console.dir(obj)</a></li>
<li><a href="#all_console_time_label">console.time(label)</a></li>
<li><a href="#all_console_timeend_label">console.timeEnd(label)</a></li>
<li><a href="#all_console_trace_label">console.trace(label)</a></li>
<li><a href="#all_console_assert_expression_message">console.assert(expression, [message])</a></li>
</ul>
</li>
<li><a href="#all_timers">Timers</a><ul>
<li><a href="#all_settimeout_callback_delay_arg">setTimeout(callback, delay, [arg], [...])</a></li>
<li><a href="#all_cleartimeout_timeoutid">clearTimeout(timeoutId)</a></li>
<li><a href="#all_setinterval_callback_delay_arg">setInterval(callback, delay, [arg], [...])</a></li>
<li><a href="#all_clearinterval_intervalid">clearInterval(intervalId)</a></li>
<li><a href="#all_unref">unref()</a></li>
<li><a href="#all_ref">ref()</a></li>
<li><a href="#all_setimmediate_callback_arg">setImmediate(callback, [arg], [...])</a></li>
<li><a href="#all_clearimmediate_immediateid">clearImmediate(immediateId)</a></li>
</ul>
</li>
<li><a href="#all_modules">Modules</a><ul>
<li><a href="#all_cycles">Cycles</a></li>
<li><a href="#all_core_modules">Core Modules</a></li>
<li><a href="#all_file_modules">File Modules</a></li>
<li><a href="#all_loading_from_node_modules_folders">Loading from <code>node_modules</code> Folders</a></li>
<li><a href="#all_folders_as_modules">Folders as Modules</a></li>
<li><a href="#all_caching">Caching</a><ul>
<li><a href="#all_module_caching_caveats">Module Caching Caveats</a></li>
</ul>
</li>
<li><a href="#all_the_module_object">The <code>module</code> Object</a><ul>
<li><a href="#all_module_exports">module.exports</a><ul>
<li><a href="#all_exports_alias">exports alias</a></li>
</ul>
</li>
<li><a href="#all_module_require_id">module.require(id)</a></li>
<li><a href="#all_module_id">module.id</a></li>
<li><a href="#all_module_filename">module.filename</a></li>
<li><a href="#all_module_loaded">module.loaded</a></li>
<li><a href="#all_module_parent">module.parent</a></li>
<li><a href="#all_module_children">module.children</a></li>
</ul>
</li>
<li><a href="#all_all_together">All Together...</a></li>
<li><a href="#all_loading_from_the_global_folders">Loading from the global folders</a></li>
<li><a href="#all_accessing_the_main_module">Accessing the main module</a></li>
<li><a href="#all_addenda_package_manager_tips">Addenda: Package Manager Tips</a></li>
</ul>
</li>
<li><a href="#all_addons">Addons</a><ul>
<li><a href="#all_hello_world">Hello world</a></li>
<li><a href="#all_addon_patterns">Addon patterns</a><ul>
<li><a href="#all_function_arguments">Function arguments</a></li>
<li><a href="#all_callbacks">Callbacks</a></li>
<li><a href="#all_object_factory">Object factory</a></li>
<li><a href="#all_function_factory">Function factory</a></li>
<li><a href="#all_wrapping_c_objects">Wrapping C++ objects</a></li>
<li><a href="#all_factory_of_wrapped_objects">Factory of wrapped objects</a></li>
<li><a href="#all_passing_wrapped_objects_around">Passing wrapped objects around</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_process_1">process</a><ul>
<li><a href="#all_event_exit">Event: &#39;exit&#39;</a></li>
<li><a href="#all_event_uncaughtexception">Event: &#39;uncaughtException&#39;</a></li>
<li><a href="#all_signal_events">Signal Events</a></li>
<li><a href="#all_process_stdout">process.stdout</a></li>
<li><a href="#all_process_stderr">process.stderr</a></li>
<li><a href="#all_process_stdin">process.stdin</a></li>
<li><a href="#all_process_argv">process.argv</a></li>
<li><a href="#all_process_execpath">process.execPath</a></li>
<li><a href="#all_process_execargv">process.execArgv</a></li>
<li><a href="#all_process_abort">process.abort()</a></li>
<li><a href="#all_process_chdir_directory">process.chdir(directory)</a></li>
<li><a href="#all_process_cwd">process.cwd()</a></li>
<li><a href="#all_process_env">process.env</a></li>
<li><a href="#all_process_exit_code">process.exit([code])</a></li>
<li><a href="#all_process_getgid">process.getgid()</a></li>
<li><a href="#all_process_setgid_id">process.setgid(id)</a></li>
<li><a href="#all_process_getuid">process.getuid()</a></li>
<li><a href="#all_process_setuid_id">process.setuid(id)</a></li>
<li><a href="#all_process_getgroups">process.getgroups()</a></li>
<li><a href="#all_process_setgroups_groups">process.setgroups(groups)</a></li>
<li><a href="#all_process_initgroups_user_extra_group">process.initgroups(user, extra_group)</a></li>
<li><a href="#all_process_version">process.version</a></li>
<li><a href="#all_process_versions">process.versions</a></li>
<li><a href="#all_process_config">process.config</a></li>
<li><a href="#all_process_kill_pid_signal">process.kill(pid, [signal])</a></li>
<li><a href="#all_process_pid">process.pid</a></li>
<li><a href="#all_process_title">process.title</a></li>
<li><a href="#all_process_arch">process.arch</a></li>
<li><a href="#all_process_platform">process.platform</a></li>
<li><a href="#all_process_memoryusage">process.memoryUsage()</a></li>
<li><a href="#all_process_nexttick_callback">process.nextTick(callback)</a></li>
http://evolve.elsevier.com
<li><a href="#all_process_maxtickdepth">process.maxTickDepth</a></li>
<li><a href="#all_process_umask_mask">process.umask([mask])</a></li>
<li><a href="#all_process_uptime">process.uptime()</a></li>
<li><a href="#all_process_hrtime">process.hrtime()</a></li>
</ul>
</li>
<li><a href="#all_util">util</a><ul>
<li><a href="#all_util_format_format">util.format(format, [...])</a></li>
<li><a href="#all_util_debug_string">util.debug(string)</a></li>
<li><a href="#all_util_error">util.error([...])</a></li>
<li><a href="#all_util_puts">util.puts([...])</a></li>
<li><a href="#all_util_print">util.print([...])</a></li>
<li><a href="#all_util_log_string">util.log(string)</a></li>
<li><a href="#all_util_inspect_object_options">util.inspect(object, [options])</a><ul>
<li><a href="#all_customizing_util_inspect_colors">Customizing <code>util.inspect</code> colors</a></li>
</ul>
</li>
<li><a href="#all_util_isarray_object">util.isArray(object)</a></li>
<li><a href="#all_util_isregexp_object">util.isRegExp(object)</a></li>
<li><a href="#all_util_isdate_object">util.isDate(object)</a></li>
<li><a href="#all_util_iserror_object">util.isError(object)</a></li>
<li><a href="#all_util_pump_readablestream_writablestream_callback">util.pump(readableStream, writableStream, [callback])</a></li>
<li><a href="#all_util_inherits_constructor_superconstructor">util.inherits(constructor, superConstructor)</a></li>
</ul>
</li>
<li><a href="#all_events">Events</a><ul>
<li><a href="#all_class_events_eventemitter">Class: events.EventEmitter</a><ul>
<li><a href="#all_emitter_addlistener_event_listener">emitter.addListener(event, listener)</a></li>
<li><a href="#all_emitter_on_event_listener">emitter.on(event, listener)</a></li>
<li><a href="#all_emitter_once_event_listener">emitter.once(event, listener)</a></li>
<li><a href="#all_emitter_removelistener_event_listener">emitter.removeListener(event, listener)</a></li>
<li><a href="#all_emitter_removealllisteners_event">emitter.removeAllListeners([event])</a></li>
<li><a href="#all_emitter_setmaxlisteners_n">emitter.setMaxListeners(n)</a></li>
<li><a href="#all_emitter_listeners_event">emitter.listeners(event)</a></li>
<li><a href="#all_emitter_emit_event_arg1_arg2">emitter.emit(event, [arg1], [arg2], [...])</a></li>
<li><a href="#all_class_method_eventemitter_listenercount_emitter_event">Class Method: EventEmitter.listenerCount(emitter, event)</a></li>
<li><a href="#all_event_newlistener">Event: &#39;newListener&#39;</a></li>
<li><a href="#all_event_removelistener">Event: &#39;removeListener&#39;</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_domain">Domain</a><ul>
<li><a href="#all_warning_don_t_ignore_errors">Warning: Don&#39;t Ignore Errors!</a></li>
<li><a href="#all_additions_to_error_objects">Additions to Error objects</a></li>
<li><a href="#all_implicit_binding">Implicit Binding</a></li>
<li><a href="#all_explicit_binding">Explicit Binding</a></li>
<li><a href="#all_domain_create">domain.create()</a></li>
<li><a href="#all_class_domain">Class: Domain</a><ul>
<li><a href="#all_domain_run_fn">domain.run(fn)</a></li>
<li><a href="#all_domain_members">domain.members</a></li>
<li><a href="#all_domain_add_emitter">domain.add(emitter)</a></li>
<li><a href="#all_domain_remove_emitter">domain.remove(emitter)</a></li>
<li><a href="#all_domain_bind_callback">domain.bind(callback)</a><ul>
<li><a href="#all_example">Example</a></li>
</ul>
</li>
<li><a href="#all_domain_intercept_callback">domain.intercept(callback)</a><ul>
<li><a href="#all_example_1">Example</a></li>
</ul>
</li>
<li><a href="#all_domain_enter">domain.enter()</a></li>
<li><a href="#all_domain_exit">domain.exit()</a></li>
<li><a href="#all_domain_dispose">domain.dispose()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_buffer">Buffer</a><ul>
<li><a href="#all_class_buffer_1">Class: Buffer</a><ul>
<li><a href="#all_new_buffer_size">new Buffer(size)</a></li>
<li><a href="#all_new_buffer_array">new Buffer(array)</a></li>
<li><a href="#all_new_buffer_str_encoding">new Buffer(str, [encoding])</a></li>
<li><a href="#all_class_method_buffer_isencoding_encoding">Class Method: Buffer.isEncoding(encoding)</a></li>
<li><a href="#all_buf_write_string_offset_length_encoding">buf.write(string, [offset], [length], [encoding])</a></li>
<li><a href="#all_buf_tostring_encoding_start_end">buf.toString([encoding], [start], [end])</a></li>
<li><a href="#all_buf_tojson">buf.toJSON()</a></li>
<li><a href="#all_buf_index">buf[index]</a></li>
<li><a href="#all_class_method_buffer_isbuffer_obj">Class Method: Buffer.isBuffer(obj)</a></li>
<li><a href="#all_class_method_buffer_bytelength_string_encoding">Class Method: Buffer.byteLength(string, [encoding])</a></li>
<li><a href="#all_class_method_buffer_concat_list_totallength">Class Method: Buffer.concat(list, [totalLength])</a></li>
<li><a href="#all_buf_length">buf.length</a></li>
<li><a href="#all_buf_copy_targetbuffer_targetstart_sourcestart_sourceend">buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])</a></li>
<li><a href="#all_buf_slice_start_end">buf.slice([start], [end])</a></li>
<li><a href="#all_buf_readuint8_offset_noassert">buf.readUInt8(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint16le_offset_noassert">buf.readUInt16LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint16be_offset_noassert">buf.readUInt16BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint32le_offset_noassert">buf.readUInt32LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint32be_offset_noassert">buf.readUInt32BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint8_offset_noassert">buf.readInt8(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint16le_offset_noassert">buf.readInt16LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint16be_offset_noassert">buf.readInt16BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint32le_offset_noassert">buf.readInt32LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint32be_offset_noassert">buf.readInt32BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readfloatle_offset_noassert">buf.readFloatLE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readfloatbe_offset_noassert">buf.readFloatBE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readdoublele_offset_noassert">buf.readDoubleLE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readdoublebe_offset_noassert">buf.readDoubleBE(offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint8_value_offset_noassert">buf.writeUInt8(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint16le_value_offset_noassert">buf.writeUInt16LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint16be_value_offset_noassert">buf.writeUInt16BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint32le_value_offset_noassert">buf.writeUInt32LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint32be_value_offset_noassert">buf.writeUInt32BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint8_value_offset_noassert">buf.writeInt8(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint16le_value_offset_noassert">buf.writeInt16LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint16be_value_offset_noassert">buf.writeInt16BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint32le_value_offset_noassert">buf.writeInt32LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint32be_value_offset_noassert">buf.writeInt32BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writefloatle_value_offset_noassert">buf.writeFloatLE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writefloatbe_value_offset_noassert">buf.writeFloatBE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writedoublele_value_offset_noassert">buf.writeDoubleLE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writedoublebe_value_offset_noassert">buf.writeDoubleBE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_fill_value_offset_end">buf.fill(value, [offset], [end])</a></li>
</ul>
</li>
<li><a href="#all_buffer_inspect_max_bytes">buffer.INSPECT_MAX_BYTES</a></li>
<li><a href="#all_class_slowbuffer">Class: SlowBuffer</a></li>
</ul>
</li>
<li><a href="#all_stream">Stream</a><ul>
<li><a href="#all_api_for_stream_consumers">API for Stream Consumers</a><ul>
<li><a href="#all_class_stream_readable">Class: stream.Readable</a><ul>
<li><a href="#all_event_readable">Event: &#39;readable&#39;</a></li>
<li><a href="#all_event_data">Event: &#39;data&#39;</a></li>
<li><a href="#all_event_end">Event: &#39;end&#39;</a></li>
<li><a href="#all_event_close">Event: &#39;close&#39;</a></li>
<li><a href="#all_event_error">Event: &#39;error&#39;</a></li>
<li><a href="#all_readable_read_size">readable.read([size])</a></li>
<li><a href="#all_readable_setencoding_encoding">readable.setEncoding(encoding)</a></li>
<li><a href="#all_readable_resume">readable.resume()</a></li>
<li><a href="#all_readable_pause">readable.pause()</a></li>
<li><a href="#all_readable_pipe_destination_options">readable.pipe(destination, [options])</a></li>
<li><a href="#all_readable_unpipe_destination">readable.unpipe([destination])</a></li>
<li><a href="#all_readable_unshift_chunk">readable.unshift(chunk)</a></li>
<li><a href="#all_readable_wrap_stream">readable.wrap(stream)</a></li>
</ul>
</li>
<li><a href="#all_class_stream_writable">Class: stream.Writable</a><ul>
<li><a href="#all_writable_write_chunk_encoding_callback">writable.write(chunk, [encoding], [callback])</a></li>
<li><a href="#all_event_drain">Event: &#39;drain&#39;</a></li>
<li><a href="#all_writable_end_chunk_encoding_callback">writable.end([chunk], [encoding], [callback])</a></li>
<li><a href="#all_event_finish">Event: &#39;finish&#39;</a></li>
<li><a href="#all_event_pipe">Event: &#39;pipe&#39;</a></li>
<li><a href="#all_event_unpipe">Event: &#39;unpipe&#39;</a></li>
</ul>
</li>
<li><a href="#all_class_stream_duplex">Class: stream.Duplex</a></li>
<li><a href="#all_class_stream_transform">Class: stream.Transform</a></li>
</ul>
</li>
<li><a href="#all_api_for_stream_implementors">API for Stream Implementors</a><ul>
<li><a href="#all_class_stream_readable_1">Class: stream.Readable</a><ul>
<li><a href="#all_example_a_counting_stream">Example: A Counting Stream</a></li>
<li><a href="#all_example_simpleprotocol_v1_sub_optimal">Example: SimpleProtocol v1 (Sub-optimal)</a></li>
<li><a href="#all_new_stream_readable_options">new stream.Readable([options])</a></li>
<li><a href="#all_readable_read_size_1">readable._read(size)</a></li>
<li><a href="#all_readable_push_chunk_encoding">readable.push(chunk, [encoding])</a></li>
</ul>
</li>
<li><a href="#all_class_stream_writable_1">Class: stream.Writable</a><ul>
<li><a href="#all_new_stream_writable_options">new stream.Writable([options])</a></li>
<li><a href="#all_writable_write_chunk_encoding_callback_1">writable._write(chunk, encoding, callback)</a></li>
</ul>
</li>
<li><a href="#all_class_stream_duplex_1">Class: stream.Duplex</a><ul>
<li><a href="#all_new_stream_duplex_options">new stream.Duplex(options)</a></li>
</ul>
</li>
<li><a href="#all_class_stream_transform_1">Class: stream.Transform</a><ul>
<li><a href="#all_new_stream_transform_options">new stream.Transform([options])</a></li>
<li><a href="#all_transform_transform_chunk_encoding_callback">transform._transform(chunk, encoding, callback)</a></li>
<li><a href="#all_transform_flush_callback">transform._flush(callback)</a></li>
<li><a href="#all_example_simpleprotocol_parser_v2">Example: <code>SimpleProtocol</code> parser v2</a></li>
</ul>
</li>
<li><a href="#all_class_stream_passthrough">Class: stream.PassThrough</a></li>
</ul>
</li>
<li><a href="#all_streams_under_the_hood">Streams: Under the Hood</a><ul>
<li><a href="#all_buffering">Buffering</a></li>
<li><a href="#all_stream_read_0"><code>stream.read(0)</code></a></li>
<li><a href="#all_stream_push"><code>stream.push(&#39;&#39;)</code></a></li>
<li><a href="#all_compatibility_with_older_node_versions">Compatibility with Older Node Versions</a></li>
<li><a href="#all_object_mode">Object Mode</a></li>
<li><a href="#all_state_objects">State Objects</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_crypto">Crypto</a><ul>
<li><a href="#all_crypto_getciphers">crypto.getCiphers()</a></li>
<li><a href="#all_crypto_gethashes">crypto.getHashes()</a></li>
<li><a href="#all_crypto_createcredentials_details">crypto.createCredentials(details)</a></li>
<li><a href="#all_crypto_createhash_algorithm">crypto.createHash(algorithm)</a></li>
<li><a href="#all_class_hash">Class: Hash</a><ul>
<li><a href="#all_hash_update_data_input_encoding">hash.update(data, [input_encoding])</a></li>
<li><a href="#all_hash_digest_encoding">hash.digest([encoding])</a></li>
</ul>
</li>
<li><a href="#all_crypto_createhmac_algorithm_key">crypto.createHmac(algorithm, key)</a></li>
<li><a href="#all_class_hmac">Class: Hmac</a><ul>
<li><a href="#all_hmac_update_data">hmac.update(data)</a></li>
<li><a href="#all_hmac_digest_encoding">hmac.digest([encoding])</a></li>
</ul>
</li>
<li><a href="#all_crypto_createcipher_algorithm_password">crypto.createCipher(algorithm, password)</a></li>
<li><a href="#all_crypto_createcipheriv_algorithm_key_iv">crypto.createCipheriv(algorithm, key, iv)</a></li>
<li><a href="#all_class_cipher">Class: Cipher</a><ul>
<li><a href="#all_cipher_update_data_input_encoding_output_encoding">cipher.update(data, [input_encoding], [output_encoding])</a></li>
<li><a href="#all_cipher_final_output_encoding">cipher.final([output_encoding])</a></li>
<li><a href="#all_cipher_setautopadding_auto_padding_true">cipher.setAutoPadding(auto_padding=true)</a></li>
</ul>
</li>
<li><a href="#all_crypto_createdecipher_algorithm_password">crypto.createDecipher(algorithm, password)</a></li>
<li><a href="#all_crypto_createdecipheriv_algorithm_key_iv">crypto.createDecipheriv(algorithm, key, iv)</a></li>
<li><a href="#all_class_decipher">Class: Decipher</a><ul>
<li><a href="#all_decipher_update_data_input_encoding_output_encoding">decipher.update(data, [input_encoding], [output_encoding])</a></li>
<li><a href="#all_decipher_final_output_encoding">decipher.final([output_encoding])</a></li>
<li><a href="#all_decipher_setautopadding_auto_padding_true">decipher.setAutoPadding(auto_padding=true)</a></li>
</ul>
</li>
<li><a href="#all_crypto_createsign_algorithm">crypto.createSign(algorithm)</a></li>
<li><a href="#all_class_sign">Class: Sign</a><ul>
<li><a href="#all_sign_update_data">sign.update(data)</a></li>
<li><a href="#all_sign_sign_private_key_output_format">sign.sign(private_key, [output_format])</a></li>
</ul>
</li>
<li><a href="#all_crypto_createverify_algorithm">crypto.createVerify(algorithm)</a></li>
<li><a href="#all_class_verify">Class: Verify</a><ul>
<li><a href="#all_verifier_update_data">verifier.update(data)</a></li>
<li><a href="#all_verifier_verify_object_signature_signature_format">verifier.verify(object, signature, [signature_format])</a></li>
</ul>
</li>
<li><a href="#all_crypto_creatediffiehellman_prime_length">crypto.createDiffieHellman(prime_length)</a></li>
<li><a href="#all_crypto_creatediffiehellman_prime_encoding">crypto.createDiffieHellman(prime, [encoding])</a></li>
<li><a href="#all_class_diffiehellman">Class: DiffieHellman</a><ul>
<li><a href="#all_diffiehellman_generatekeys_encoding">diffieHellman.generateKeys([encoding])</a></li>
<li><a href="#all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding">diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])</a></li>
<li><a href="#all_diffiehellman_getprime_encoding">diffieHellman.getPrime([encoding])</a></li>
<li><a href="#all_diffiehellman_getgenerator_encoding">diffieHellman.getGenerator([encoding])</a></li>
<li><a href="#all_diffiehellman_getpublickey_encoding">diffieHellman.getPublicKey([encoding])</a></li>
<li><a href="#all_diffiehellman_getprivatekey_encoding">diffieHellman.getPrivateKey([encoding])</a></li>
<li><a href="#all_diffiehellman_setpublickey_public_key_encoding">diffieHellman.setPublicKey(public_key, [encoding])</a></li>
<li><a href="#all_diffiehellman_setprivatekey_private_key_encoding">diffieHellman.setPrivateKey(private_key, [encoding])</a></li>
</ul>
</li>
<li><a href="#all_crypto_getdiffiehellman_group_name">crypto.getDiffieHellman(group_name)</a></li>
<li><a href="#all_crypto_pbkdf2_password_salt_iterations_keylen_callback">crypto.pbkdf2(password, salt, iterations, keylen, callback)</a></li>
<li><a href="#all_crypto_pbkdf2sync_password_salt_iterations_keylen">crypto.pbkdf2Sync(password, salt, iterations, keylen)</a></li>
<li><a href="#all_crypto_randombytes_size_callback">crypto.randomBytes(size, [callback])</a></li>
<li><a href="#all_crypto_pseudorandombytes_size_callback">crypto.pseudoRandomBytes(size, [callback])</a></li>
<li><a href="#all_crypto_default_encoding">crypto.DEFAULT_ENCODING</a></li>
<li><a href="#all_recent_api_changes">Recent API Changes</a></li>
</ul>
</li>
<li><a href="#all_tls_ssl">TLS (SSL)</a><ul>
<li><a href="#all_client_initiated_renegotiation_attack_mitigation">Client-initiated renegotiation attack mitigation</a></li>
<li><a href="#all_npn_and_sni">NPN and SNI</a></li>
<li><a href="#all_tls_getciphers">tls.getCiphers()</a></li>
<li><a href="#all_tls_createserver_options_secureconnectionlistener">tls.createServer(options, [secureConnectionListener])</a></li>
<li><a href="#all_tls_slab_buffer_size">tls.SLAB_BUFFER_SIZE</a></li>
<li><a href="#all_tls_connect_options_callback">tls.connect(options, [callback])</a></li>
<li><a href="#all_tls_connect_port_host_options_callback">tls.connect(port, [host], [options], [callback])</a></li>
<li><a href="#all_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized">tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])</a></li>
<li><a href="#all_class_securepair">Class: SecurePair</a><ul>
<li><a href="#all_event_secure">Event: &#39;secure&#39;</a></li>
</ul>
</li>
<li><a href="#all_class_tls_server">Class: tls.Server</a><ul>
<li><a href="#all_event_secureconnection">Event: &#39;secureConnection&#39;</a></li>
<li><a href="#all_event_clienterror">Event: &#39;clientError&#39;</a></li>
<li><a href="#all_event_newsession">Event: &#39;newSession&#39;</a></li>
<li><a href="#all_event_resumesession">Event: &#39;resumeSession&#39;</a></li>
<li><a href="#all_server_listen_port_host_callback">server.listen(port, [host], [callback])</a></li>
<li><a href="#all_server_close">server.close()</a></li>
<li><a href="#all_server_address">server.address()</a></li>
<li><a href="#all_server_addcontext_hostname_credentials">server.addContext(hostname, credentials)</a></li>
<li><a href="#all_server_maxconnections">server.maxConnections</a></li>
<li><a href="#all_server_connections">server.connections</a></li>
</ul>
</li>
<li><a href="#all_class_cryptostream">Class: CryptoStream</a><ul>
<li><a href="#all_cryptostream_byteswritten">cryptoStream.bytesWritten</a></li>
</ul>
</li>
<li><a href="#all_class_tls_cleartextstream">Class: tls.CleartextStream</a><ul>
<li><a href="#all_event_secureconnect">Event: &#39;secureConnect&#39;</a></li>
<li><a href="#all_cleartextstream_authorized">cleartextStream.authorized</a></li>
<li><a href="#all_cleartextstream_authorizationerror">cleartextStream.authorizationError</a></li>
<li><a href="#all_cleartextstream_getpeercertificate">cleartextStream.getPeerCertificate()</a></li>
<li><a href="#all_cleartextstream_getcipher">cleartextStream.getCipher()</a></li>
<li><a href="#all_cleartextstream_address">cleartextStream.address()</a></li>
<li><a href="#all_cleartextstream_remoteaddress">cleartextStream.remoteAddress</a></li>
<li><a href="#all_cleartextstream_remoteport">cleartextStream.remotePort</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_stringdecoder">StringDecoder</a><ul>
<li><a href="#all_class_stringdecoder">Class: StringDecoder</a><ul>
<li><a href="#all_decoder_write_buffer">decoder.write(buffer)</a></li>
<li><a href="#all_decoder_end">decoder.end()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_file_system">File System</a><ul>
<li><a href="#all_fs_rename_oldpath_newpath_callback">fs.rename(oldPath, newPath, callback)</a></li>
<li><a href="#all_fs_renamesync_oldpath_newpath">fs.renameSync(oldPath, newPath)</a></li>
<li><a href="#all_fs_ftruncate_fd_len_callback">fs.ftruncate(fd, len, callback)</a></li>
<li><a href="#all_fs_ftruncatesync_fd_len">fs.ftruncateSync(fd, len)</a></li>
<li><a href="#all_fs_truncate_path_len_callback">fs.truncate(path, len, callback)</a></li>
<li><a href="#all_fs_truncatesync_path_len">fs.truncateSync(path, len)</a></li>
<li><a href="#all_fs_chown_path_uid_gid_callback">fs.chown(path, uid, gid, callback)</a></li>
<li><a href="#all_fs_chownsync_path_uid_gid">fs.chownSync(path, uid, gid)</a></li>
<li><a href="#all_fs_fchown_fd_uid_gid_callback">fs.fchown(fd, uid, gid, callback)</a></li>
<li><a href="#all_fs_fchownsync_fd_uid_gid">fs.fchownSync(fd, uid, gid)</a></li>
<li><a href="#all_fs_lchown_path_uid_gid_callback">fs.lchown(path, uid, gid, callback)</a></li>
<li><a href="#all_fs_lchownsync_path_uid_gid">fs.lchownSync(path, uid, gid)</a></li>
<li><a href="#all_fs_chmod_path_mode_callback">fs.chmod(path, mode, callback)</a></li>
<li><a href="#all_fs_chmodsync_path_mode">fs.chmodSync(path, mode)</a></li>
<li><a href="#all_fs_fchmod_fd_mode_callback">fs.fchmod(fd, mode, callback)</a></li>
<li><a href="#all_fs_fchmodsync_fd_mode">fs.fchmodSync(fd, mode)</a></li>
<li><a href="#all_fs_lchmod_path_mode_callback">fs.lchmod(path, mode, callback)</a></li>
<li><a href="#all_fs_lchmodsync_path_mode">fs.lchmodSync(path, mode)</a></li>
<li><a href="#all_fs_stat_path_callback">fs.stat(path, callback)</a></li>
<li><a href="#all_fs_lstat_path_callback">fs.lstat(path, callback)</a></li>
<li><a href="#all_fs_fstat_fd_callback">fs.fstat(fd, callback)</a></li>
<li><a href="#all_fs_statsync_path">fs.statSync(path)</a></li>
<li><a href="#all_fs_lstatsync_path">fs.lstatSync(path)</a></li>
<li><a href="#all_fs_fstatsync_fd">fs.fstatSync(fd)</a></li>
<li><a href="#all_fs_link_srcpath_dstpath_callback">fs.link(srcpath, dstpath, callback)</a></li>
<li><a href="#all_fs_linksync_srcpath_dstpath">fs.linkSync(srcpath, dstpath)</a></li>
<li><a href="#all_fs_symlink_srcpath_dstpath_type_callback">fs.symlink(srcpath, dstpath, [type], callback)</a></li>
<li><a href="#all_fs_symlinksync_srcpath_dstpath_type">fs.symlinkSync(srcpath, dstpath, [type])</a></li>
<li><a href="#all_fs_readlink_path_callback">fs.readlink(path, callback)</a></li>
<li><a href="#all_fs_readlinksync_path">fs.readlinkSync(path)</a></li>
<li><a href="#all_fs_realpath_path_cache_callback">fs.realpath(path, [cache], callback)</a></li>
<li><a href="#all_fs_realpathsync_path_cache">fs.realpathSync(path, [cache])</a></li>
<li><a href="#all_fs_unlink_path_callback">fs.unlink(path, callback)</a></li>
<li><a href="#all_fs_unlinksync_path">fs.unlinkSync(path)</a></li>
<li><a href="#all_fs_rmdir_path_callback">fs.rmdir(path, callback)</a></li>
<li><a href="#all_fs_rmdirsync_path">fs.rmdirSync(path)</a></li>
<li><a href="#all_fs_mkdir_path_mode_callback">fs.mkdir(path, [mode], callback)</a></li>
<li><a href="#all_fs_mkdirsync_path_mode">fs.mkdirSync(path, [mode])</a></li>
<li><a href="#all_fs_readdir_path_callback">fs.readdir(path, callback)</a></li>
<li><a href="#all_fs_readdirsync_path">fs.readdirSync(path)</a></li>
<li><a href="#all_fs_close_fd_callback">fs.close(fd, callback)</a></li>
<li><a href="#all_fs_closesync_fd">fs.closeSync(fd)</a></li>
<li><a href="#all_fs_open_path_flags_mode_callback">fs.open(path, flags, [mode], callback)</a></li>
<li><a href="#all_fs_opensync_path_flags_mode">fs.openSync(path, flags, [mode])</a></li>
<li><a href="#all_fs_utimes_path_atime_mtime_callback">fs.utimes(path, atime, mtime, callback)</a></li>
<li><a href="#all_fs_utimessync_path_atime_mtime">fs.utimesSync(path, atime, mtime)</a></li>
<li><a href="#all_fs_futimes_fd_atime_mtime_callback">fs.futimes(fd, atime, mtime, callback)</a></li>
<li><a href="#all_fs_futimessync_fd_atime_mtime">fs.futimesSync(fd, atime, mtime)</a></li>
<li><a href="#all_fs_fsync_fd_callback">fs.fsync(fd, callback)</a></li>
<li><a href="#all_fs_fsyncsync_fd">fs.fsyncSync(fd)</a></li>
<li><a href="#all_fs_write_fd_buffer_offset_length_position_callback">fs.write(fd, buffer, offset, length, position, callback)</a></li>
<li><a href="#all_fs_writesync_fd_buffer_offset_length_position">fs.writeSync(fd, buffer, offset, length, position)</a></li>
<li><a href="#all_fs_read_fd_buffer_offset_length_position_callback">fs.read(fd, buffer, offset, length, position, callback)</a></li>
<li><a href="#all_fs_readsync_fd_buffer_offset_length_position">fs.readSync(fd, buffer, offset, length, position)</a></li>
<li><a href="#all_fs_readfile_filename_options_callback">fs.readFile(filename, [options], callback)</a></li>
<li><a href="#all_fs_readfilesync_filename_options">fs.readFileSync(filename, [options])</a></li>
<li><a href="#all_fs_writefile_filename_data_options_callback">fs.writeFile(filename, data, [options], callback)</a></li>
<li><a href="#all_fs_writefilesync_filename_data_options">fs.writeFileSync(filename, data, [options])</a></li>
<li><a href="#all_fs_appendfile_filename_data_options_callback">fs.appendFile(filename, data, [options], callback)</a></li>
<li><a href="#all_fs_appendfilesync_filename_data_options">fs.appendFileSync(filename, data, [options])</a></li>
<li><a href="#all_fs_watchfile_filename_options_listener">fs.watchFile(filename, [options], listener)</a></li>
<li><a href="#all_fs_unwatchfile_filename_listener">fs.unwatchFile(filename, [listener])</a></li>
<li><a href="#all_fs_watch_filename_options_listener">fs.watch(filename, [options], [listener])</a><ul>
<li><a href="#all_caveats">Caveats</a><ul>
<li><a href="#all_availability">Availability</a></li>
<li><a href="#all_filename_argument">Filename Argument</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_fs_exists_path_callback">fs.exists(path, callback)</a></li>
<li><a href="#all_fs_existssync_path">fs.existsSync(path)</a></li>
<li><a href="#all_class_fs_stats">Class: fs.Stats</a></li>
<li><a href="#all_fs_createreadstream_path_options">fs.createReadStream(path, [options])</a></li>
<li><a href="#all_class_fs_readstream">Class: fs.ReadStream</a><ul>
<li><a href="#all_event_open">Event: &#39;open&#39;</a></li>
</ul>
</li>
<li><a href="#all_fs_createwritestream_path_options">fs.createWriteStream(path, [options])</a></li>
<li><a href="#all_class_fs_writestream">Class: fs.WriteStream</a><ul>
<li><a href="#all_event_open_1">Event: &#39;open&#39;</a></li>
<li><a href="#all_file_byteswritten">file.bytesWritten</a></li>
</ul>
</li>
<li><a href="#all_class_fs_fswatcher">Class: fs.FSWatcher</a><ul>
<li><a href="#all_watcher_close">watcher.close()</a></li>
<li><a href="#all_event_change">Event: &#39;change&#39;</a></li>
<li><a href="#all_event_error_1">Event: &#39;error&#39;</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_path">Path</a><ul>
<li><a href="#all_path_normalize_p">path.normalize(p)</a></li>
<li><a href="#all_path_join_path1_path2">path.join([path1], [path2], [...])</a></li>
<li><a href="#all_path_resolve_from_to">path.resolve([from ...], to)</a></li>
<li><a href="#all_path_relative_from_to">path.relative(from, to)</a></li>
<li><a href="#all_path_dirname_p">path.dirname(p)</a></li>
<li><a href="#all_path_basename_p_ext">path.basename(p, [ext])</a></li>
<li><a href="#all_path_extname_p">path.extname(p)</a></li>
<li><a href="#all_path_sep">path.sep</a></li>
<li><a href="#all_path_delimiter">path.delimiter</a></li>
</ul>
</li>
<li><a href="#all_net">net</a><ul>
<li><a href="#all_net_createserver_options_connectionlistener">net.createServer([options], [connectionListener])</a></li>
<li><a href="#all_net_connect_options_connectionlistener">net.connect(options, [connectionListener])</a></li>
<li><a href="#all_net_createconnection_options_connectionlistener">net.createConnection(options, [connectionListener])</a></li>
<li><a href="#all_net_connect_port_host_connectlistener">net.connect(port, [host], [connectListener])</a></li>
<li><a href="#all_net_createconnection_port_host_connectlistener">net.createConnection(port, [host], [connectListener])</a></li>
<li><a href="#all_net_connect_path_connectlistener">net.connect(path, [connectListener])</a></li>
<li><a href="#all_net_createconnection_path_connectlistener">net.createConnection(path, [connectListener])</a></li>
<li><a href="#all_class_net_server">Class: net.Server</a><ul>
<li><a href="#all_server_listen_port_host_backlog_callback">server.listen(port, [host], [backlog], [callback])</a></li>
<li><a href="#all_server_listen_path_callback">server.listen(path, [callback])</a></li>
<li><a href="#all_server_listen_handle_callback">server.listen(handle, [callback])</a></li>
<li><a href="#all_server_close_callback">server.close([callback])</a></li>
<li><a href="#all_server_address_1">server.address()</a></li>
<li><a href="#all_server_unref">server.unref()</a></li>
<li><a href="#all_server_ref">server.ref()</a></li>
<li><a href="#all_server_maxconnections_1">server.maxConnections</a></li>
<li><a href="#all_server_connections_1">server.connections</a></li>
<li><a href="#all_server_getconnections_callback">server.getConnections(callback)</a></li>
<li><a href="#all_event_listening">Event: &#39;listening&#39;</a></li>
<li><a href="#all_event_connection">Event: &#39;connection&#39;</a></li>
<li><a href="#all_event_close_1">Event: &#39;close&#39;</a></li>
<li><a href="#all_event_error_2">Event: &#39;error&#39;</a></li>
</ul>
</li>
<li><a href="#all_class_net_socket">Class: net.Socket</a><ul>
<li><a href="#all_new_net_socket_options">new net.Socket([options])</a></li>
<li><a href="#all_socket_connect_port_host_connectlistener">socket.connect(port, [host], [connectListener])</a></li>
<li><a href="#all_socket_connect_path_connectlistener">socket.connect(path, [connectListener])</a></li>
<li><a href="#all_socket_buffersize">socket.bufferSize</a></li>
<li><a href="#all_socket_setencoding_encoding">socket.setEncoding([encoding])</a></li>
<li><a href="#all_socket_write_data_encoding_callback">socket.write(data, [encoding], [callback])</a></li>
<li><a href="#all_socket_end_data_encoding">socket.end([data], [encoding])</a></li>
<li><a href="#all_socket_destroy">socket.destroy()</a></li>
<li><a href="#all_socket_pause">socket.pause()</a></li>
<li><a href="#all_socket_resume">socket.resume()</a></li>
<li><a href="#all_socket_settimeout_timeout_callback">socket.setTimeout(timeout, [callback])</a></li>
<li><a href="#all_socket_setnodelay_nodelay">socket.setNoDelay([noDelay])</a></li>
<li><a href="#all_socket_setkeepalive_enable_initialdelay">socket.setKeepAlive([enable], [initialDelay])</a></li>
<li><a href="#all_socket_address">socket.address()</a></li>
<li><a href="#all_socket_unref">socket.unref()</a></li>
<li><a href="#all_socket_ref">socket.ref()</a></li>
<li><a href="#all_socket_remoteaddress">socket.remoteAddress</a></li>
<li><a href="#all_socket_remoteport">socket.remotePort</a></li>
<li><a href="#all_socket_localaddress">socket.localAddress</a></li>
<li><a href="#all_socket_localport">socket.localPort</a></li>
<li><a href="#all_socket_bytesread">socket.bytesRead</a></li>
<li><a href="#all_socket_byteswritten">socket.bytesWritten</a></li>
<li><a href="#all_event_connect">Event: &#39;connect&#39;</a></li>
<li><a href="#all_event_data_1">Event: &#39;data&#39;</a></li>
<li><a href="#all_event_end_1">Event: &#39;end&#39;</a></li>
<li><a href="#all_event_timeout">Event: &#39;timeout&#39;</a></li>
<li><a href="#all_event_drain_1">Event: &#39;drain&#39;</a></li>
<li><a href="#all_event_error_3">Event: &#39;error&#39;</a></li>
<li><a href="#all_event_close_2">Event: &#39;close&#39;</a></li>
</ul>
</li>
<li><a href="#all_net_isip_input">net.isIP(input)</a></li>
<li><a href="#all_net_isipv4_input">net.isIPv4(input)</a></li>
<li><a href="#all_net_isipv6_input">net.isIPv6(input)</a></li>
</ul>
</li>
<li><a href="#all_udp_datagram_sockets">UDP / Datagram Sockets</a><ul>
<li><a href="#all_dgram_createsocket_type_callback">dgram.createSocket(type, [callback])</a></li>
<li><a href="#all_class_dgram_socket">Class: dgram.Socket</a><ul>
<li><a href="#all_event_message">Event: &#39;message&#39;</a></li>
<li><a href="#all_event_listening_1">Event: &#39;listening&#39;</a></li>
<li><a href="#all_event_close_3">Event: &#39;close&#39;</a></li>
<li><a href="#all_event_error_4">Event: &#39;error&#39;</a></li>
<li><a href="#all_socket_send_buf_offset_length_port_address_callback">socket.send(buf, offset, length, port, address, [callback])</a></li>
<li><a href="#all_socket_bind_port_address_callback">socket.bind(port, [address], [callback])</a></li>
<li><a href="#all_socket_close">socket.close()</a></li>
<li><a href="#all_socket_address_1">socket.address()</a></li>
<li><a href="#all_socket_setbroadcast_flag">socket.setBroadcast(flag)</a></li>
<li><a href="#all_socket_setttl_ttl">socket.setTTL(ttl)</a></li>
<li><a href="#all_socket_setmulticastttl_ttl">socket.setMulticastTTL(ttl)</a></li>
<li><a href="#all_socket_setmulticastloopback_flag">socket.setMulticastLoopback(flag)</a></li>
<li><a href="#all_socket_addmembership_multicastaddress_multicastinterface">socket.addMembership(multicastAddress, [multicastInterface])</a></li>
http://evolve.elsevier.com
<li><a href="#all_socket_dropmembership_multicastaddress_multicastinterface">socket.dropMembership(multicastAddress, [multicastInterface])</a></li>
<li><a href="#all_socket_unref_1">socket.unref()</a></li>
<li><a href="#all_socket_ref_1">socket.ref()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_dns">DNS</a><ul>
<li><a href="#all_dns_lookup_domain_family_callback">dns.lookup(domain, [family], callback)</a></li>
<li><a href="#all_dns_resolve_domain_rrtype_callback">dns.resolve(domain, [rrtype], callback)</a></li>
<li><a href="#all_dns_resolve4_domain_callback">dns.resolve4(domain, callback)</a></li>
<li><a href="#all_dns_resolve6_domain_callback">dns.resolve6(domain, callback)</a></li>
<li><a href="#all_dns_resolvemx_domain_callback">dns.resolveMx(domain, callback)</a></li>
<li><a href="#all_dns_resolvetxt_domain_callback">dns.resolveTxt(domain, callback)</a></li>
<li><a href="#all_dns_resolvesrv_domain_callback">dns.resolveSrv(domain, callback)</a></li>
<li><a href="#all_dns_resolvens_domain_callback">dns.resolveNs(domain, callback)</a></li>
<li><a href="#all_dns_resolvecname_domain_callback">dns.resolveCname(domain, callback)</a></li>
<li><a href="#all_dns_reverse_ip_callback">dns.reverse(ip, callback)</a></li>
<li><a href="#all_error_codes">Error codes</a></li>
</ul>
</li>
<li><a href="#all_http">HTTP</a><ul>
<li><a href="#all_http_status_codes">http.STATUS_CODES</a></li>
<li><a href="#all_http_createserver_requestlistener">http.createServer([requestListener])</a></li>
<li><a href="#all_http_createclient_port_host">http.createClient([port], [host])</a></li>
<li><a href="#all_class_http_server">Class: http.Server</a><ul>
<li><a href="#all_event_request">Event: &#39;request&#39;</a></li>
<li><a href="#all_event_connection_1">Event: &#39;connection&#39;</a></li>
<li><a href="#all_event_close_4">Event: &#39;close&#39;</a></li>
<li><a href="#all_event_checkcontinue">Event: &#39;checkContinue&#39;</a></li>
<li><a href="#all_event_connect_1">Event: &#39;connect&#39;</a></li>
<li><a href="#all_event_upgrade">Event: &#39;upgrade&#39;</a></li>
<li><a href="#all_event_clienterror_1">Event: &#39;clientError&#39;</a></li>
<li><a href="#all_server_listen_port_hostname_backlog_callback">server.listen(port, [hostname], [backlog], [callback])</a></li>
<li><a href="#all_server_listen_path_callback_1">server.listen(path, [callback])</a></li>
<li><a href="#all_server_listen_handle_callback_1">server.listen(handle, [callback])</a></li>
<li><a href="#all_server_close_callback_1">server.close([callback])</a></li>
<li><a href="#all_server_maxheaderscount">server.maxHeadersCount</a></li>
<li><a href="#all_server_settimeout_msecs_callback">server.setTimeout(msecs, callback)</a></li>
<li><a href="#all_server_timeout">server.timeout</a></li>
</ul>
</li>
<li><a href="#all_class_http_serverresponse">Class: http.ServerResponse</a><ul>
<li><a href="#all_event_close_5">Event: &#39;close&#39;</a></li>
<li><a href="#all_response_writecontinue">response.writeContinue()</a></li>
<li><a href="#all_response_writehead_statuscode_reasonphrase_headers">response.writeHead(statusCode, [reasonPhrase], [headers])</a></li>
<li><a href="#all_response_settimeout_msecs_callback">response.setTimeout(msecs, callback)</a></li>
<li><a href="#all_response_statuscode">response.statusCode</a></li>
<li><a href="#all_response_setheader_name_value">response.setHeader(name, value)</a></li>
<li><a href="#all_response_headerssent">response.headersSent</a></li>
<li><a href="#all_response_senddate">response.sendDate</a></li>
<li><a href="#all_response_getheader_name">response.getHeader(name)</a></li>
<li><a href="#all_response_removeheader_name">response.removeHeader(name)</a></li>
<li><a href="#all_response_write_chunk_encoding">response.write(chunk, [encoding])</a></li>
<li><a href="#all_response_addtrailers_headers">response.addTrailers(headers)</a></li>
<li><a href="#all_response_end_data_encoding">response.end([data], [encoding])</a></li>
</ul>
</li>
<li><a href="#all_http_request_options_callback">http.request(options, callback)</a></li>
<li><a href="#all_http_get_options_callback">http.get(options, callback)</a></li>
<li><a href="#all_class_http_agent">Class: http.Agent</a><ul>
<li><a href="#all_agent_maxsockets">agent.maxSockets</a></li>
<li><a href="#all_agent_sockets">agent.sockets</a></li>
<li><a href="#all_agent_requests">agent.requests</a></li>
</ul>
</li>
<li><a href="#all_http_globalagent">http.globalAgent</a></li>
<li><a href="#all_class_http_clientrequest">Class: http.ClientRequest</a><ul>
<li><a href="#all_event_response">Event &#39;response&#39;</a></li>
<li><a href="#all_event_socket">Event: &#39;socket&#39;</a></li>
<li><a href="#all_event_connect_2">Event: &#39;connect&#39;</a></li>
<li><a href="#all_event_upgrade_1">Event: &#39;upgrade&#39;</a></li>
<li><a href="#all_event_continue">Event: &#39;continue&#39;</a></li>
<li><a href="#all_request_write_chunk_encoding">request.write(chunk, [encoding])</a></li>
<li><a href="#all_request_end_data_encoding">request.end([data], [encoding])</a></li>
<li><a href="#all_request_abort">request.abort()</a></li>
<li><a href="#all_request_settimeout_timeout_callback">request.setTimeout(timeout, [callback])</a></li>
<li><a href="#all_request_setnodelay_nodelay">request.setNoDelay([noDelay])</a></li>
<li><a href="#all_request_setsocketkeepalive_enable_initialdelay">request.setSocketKeepAlive([enable], [initialDelay])</a></li>
</ul>
</li>
http://evolve.elsevier.com
<li><a href="#all_http_incomingmessage">http.IncomingMessage</a><ul>
<li><a href="#all_event_close_6">Event: &#39;close&#39;</a></li>
<li><a href="#all_message_httpversion">message.httpVersion</a></li>
<li><a href="#all_message_headers">message.headers</a></li>
<li><a href="#all_message_trailers">message.trailers</a></li>
<li><a href="#all_message_settimeout_msecs_callback">message.setTimeout(msecs, callback)</a></li>
<li><a href="#all_message_method">message.method</a></li>
<li><a href="#all_message_url">message.url</a></li>
<li><a href="#all_message_statuscode">message.statusCode</a></li>
<li><a href="#all_message_socket">message.socket</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_https">HTTPS</a><ul>
<li><a href="#all_class_https_server">Class: https.Server</a></li>
<li><a href="#all_https_createserver_options_requestlistener">https.createServer(options, [requestListener])</a><ul>
<li><a href="#all_server_listen_port_host_backlog_callback_1">server.listen(port, [host], [backlog], [callback])</a></li>
<li><a href="#all_server_listen_path_callback_2">server.listen(path, [callback])</a></li>
<li><a href="#all_server_listen_handle_callback_2">server.listen(handle, [callback])</a></li>
<li><a href="#all_server_close_callback_2">server.close([callback])</a></li>
</ul>
</li>
<li><a href="#all_https_request_options_callback">https.request(options, callback)</a></li>
<li><a href="#all_https_get_options_callback">https.get(options, callback)</a></li>
<li><a href="#all_class_https_agent">Class: https.Agent</a></li>
<li><a href="#all_https_globalagent">https.globalAgent</a></li>
</ul>
</li>
<li><a href="#all_url">URL</a><ul>
<li><a href="#all_url_parse_urlstr_parsequerystring_slashesdenotehost">url.parse(urlStr, [parseQueryString], [slashesDenoteHost])</a></li>
<li><a href="#all_url_format_urlobj">url.format(urlObj)</a></li>
<li><a href="#all_url_resolve_from_to">url.resolve(from, to)</a></li>
</ul>
</li>
<li><a href="#all_query_string">Query String</a><ul>
<li><a href="#all_querystring_stringify_obj_sep_eq">querystring.stringify(obj, [sep], [eq])</a></li>
<li><a href="#all_querystring_parse_str_sep_eq_options">querystring.parse(str, [sep], [eq], [options])</a></li>
<li><a href="#all_querystring_escape">querystring.escape</a></li>
<li><a href="#all_querystring_unescape">querystring.unescape</a></li>
</ul>
</li>
<li><a href="#all_punycode">punycode</a><ul>
<li><a href="#all_punycode_decode_string">punycode.decode(string)</a></li>
<li><a href="#all_punycode_encode_string">punycode.encode(string)</a></li>
<li><a href="#all_punycode_tounicode_domain">punycode.toUnicode(domain)</a></li>
<li><a href="#all_punycode_toascii_domain">punycode.toASCII(domain)</a></li>
<li><a href="#all_punycode_ucs2">punycode.ucs2</a><ul>
<li><a href="#all_punycode_ucs2_decode_string">punycode.ucs2.decode(string)</a></li>
<li><a href="#all_punycode_ucs2_encode_codepoints">punycode.ucs2.encode(codePoints)</a></li>
</ul>
</li>
<li><a href="#all_punycode_version">punycode.version</a></li>
</ul>
</li>
<li><a href="#all_readline">Readline</a><ul>
<li><a href="#all_readline_createinterface_options">readline.createInterface(options)</a></li>
<li><a href="#all_class_interface">Class: Interface</a><ul>
<li><a href="#all_rl_setprompt_prompt_length">rl.setPrompt(prompt, length)</a></li>
<li><a href="#all_rl_prompt_preservecursor">rl.prompt([preserveCursor])</a></li>
<li><a href="#all_rl_question_query_callback">rl.question(query, callback)</a></li>
<li><a href="#all_rl_pause">rl.pause()</a></li>
<li><a href="#all_rl_resume">rl.resume()</a></li>
<li><a href="#all_rl_close">rl.close()</a></li>
<li><a href="#all_rl_write_data_key">rl.write(data, [key])</a></li>
</ul>
</li>
<li><a href="#all_events_1">Events</a><ul>
<li><a href="#all_event_line">Event: &#39;line&#39;</a></li>
<li><a href="#all_event_pause">Event: &#39;pause&#39;</a></li>
<li><a href="#all_event_resume">Event: &#39;resume&#39;</a></li>
<li><a href="#all_event_close_7">Event: &#39;close&#39;</a></li>
<li><a href="#all_event_sigint">Event: &#39;SIGINT&#39;</a></li>
<li><a href="#all_event_sigtstp">Event: &#39;SIGTSTP&#39;</a></li>
<li><a href="#all_event_sigcont">Event: &#39;SIGCONT&#39;</a></li>
</ul>
</li>
<li><a href="#all_example_tiny_cli">Example: Tiny CLI</a></li>
</ul>
</li>
<li><a href="#all_repl">REPL</a><ul>
<li><a href="#all_repl_start_options">repl.start(options)</a><ul>
<li><a href="#all_event_exit_1">Event: &#39;exit&#39;</a></li>
</ul>
</li>
<li><a href="#all_repl_features">REPL Features</a></li>
</ul>
</li>
<li><a href="#all_executing_javascript">Executing JavaScript</a><ul>
<li><a href="#all_caveats_1">Caveats</a><ul>
<li><a href="#all_sandboxes">Sandboxes</a></li>
<li><a href="#all_globals">Globals</a></li>
</ul>
</li>
<li><a href="#all_vm_runinthiscontext_code_filename">vm.runInThisContext(code, [filename])</a></li>
<li><a href="#all_vm_runinnewcontext_code_sandbox_filename">vm.runInNewContext(code, [sandbox], [filename])</a></li>
<li><a href="#all_vm_runincontext_code_context_filename">vm.runInContext(code, context, [filename])</a></li>
<li><a href="#all_vm_createcontext_initsandbox">vm.createContext([initSandbox])</a></li>
<li><a href="#all_vm_createscript_code_filename">vm.createScript(code, [filename])</a></li>
<li><a href="#all_class_script">Class: Script</a><ul>
<li><a href="#all_script_runinthiscontext">script.runInThisContext()</a></li>
<li><a href="#all_script_runinnewcontext_sandbox">script.runInNewContext([sandbox])</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_child_process">Child Process</a><ul>
<li><a href="#all_class_childprocess">Class: ChildProcess</a><ul>
<li><a href="#all_event_error_5">Event:  &#39;error&#39;</a></li>
<li><a href="#all_event_exit_2">Event:  &#39;exit&#39;</a></li>
<li><a href="#all_event_close_8">Event: &#39;close&#39;</a></li>
<li><a href="#all_event_disconnect">Event: &#39;disconnect&#39;</a></li>
<li><a href="#all_event_message_1">Event: &#39;message&#39;</a></li>
<li><a href="#all_child_stdin">child.stdin</a></li>
<li><a href="#all_child_stdout">child.stdout</a></li>
<li><a href="#all_child_stderr">child.stderr</a></li>
<li><a href="#all_child_pid">child.pid</a></li>
<li><a href="#all_child_connected">child.connected</a></li>
<li><a href="#all_child_kill_signal">child.kill([signal])</a></li>
<li><a href="#all_child_send_message_sendhandle">child.send(message, [sendHandle])</a><ul>
<li><a href="#all_example_sending_server_object">Example: sending server object</a></li>
<li><a href="#all_example_sending_socket_object">Example: sending socket object</a></li>
</ul>
</li>
<li><a href="#all_child_disconnect">child.disconnect()</a></li>
</ul>
</li>
<li><a href="#all_child_process_spawn_command_args_options">child_process.spawn(command, [args], [options])</a></li>
<li><a href="#all_child_process_exec_command_options_callback">child_process.exec(command, [options], callback)</a></li>
<li><a href="#all_child_process_execfile_file_args_options_callback">child_process.execFile(file, args, options, callback)</a></li>
<li><a href="#all_child_process_fork_modulepath_args_options">child_process.fork(modulePath, [args], [options])</a></li>
</ul>
</li>
<li><a href="#all_assert">Assert</a><ul>
<li><a href="#all_assert_fail_actual_expected_message_operator">assert.fail(actual, expected, message, operator)</a></li>
<li><a href="#all_assert_value_message_assert_ok_value_message">assert(value, message), assert.ok(value, [message])</a></li>
<li><a href="#all_assert_equal_actual_expected_message">assert.equal(actual, expected, [message])</a></li>
<li><a href="#all_assert_notequal_actual_expected_message">assert.notEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_deepequal_actual_expected_message">assert.deepEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_notdeepequal_actual_expected_message">assert.notDeepEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_strictequal_actual_expected_message">assert.strictEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_notstrictequal_actual_expected_message">assert.notStrictEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_throws_block_error_message">assert.throws(block, [error], [message])</a></li>
<li><a href="#all_assert_doesnotthrow_block_message">assert.doesNotThrow(block, [message])</a></li>
<li><a href="#all_assert_iferror_value">assert.ifError(value)</a></li>
</ul>
</li>
<li><a href="#all_tty">TTY</a><ul>
<li><a href="#all_tty_isatty_fd">tty.isatty(fd)</a></li>
<li><a href="#all_tty_setrawmode_mode">tty.setRawMode(mode)</a></li>
<li><a href="#all_class_readstream">Class: ReadStream</a><ul>
<li><a href="#all_rs_israw">rs.isRaw</a></li>
<li><a href="#all_rs_setrawmode_mode">rs.setRawMode(mode)</a></li>
</ul>
http://evolve.elsevier.com
</body>
</html>
